// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { MetaInfoError, MetaInfoResponse, WorkspaceCreateData, WorkspaceCreateError, WorkspaceCreateResponse2, TokenCreateData, TokenCreateError, TokenCreateResponse2, TokenUpdateData, TokenUpdateError, TokenUpdateResponse2, SandboxListData, SandboxListError, SandboxListResponse2, SandboxCreateData, SandboxCreateError, SandboxCreateResponse2, SandboxGetData, SandboxGetError, SandboxGetResponse2, SandboxForkData, SandboxForkError, SandboxForkResponse2, VmHibernateData, VmHibernateError, VmHibernateResponse, VmUpdateHibernationTimeoutData, VmUpdateHibernationTimeoutError, VmUpdateHibernationTimeoutResponse, VmCreateSessionData, VmCreateSessionError, VmCreateSessionResponse, VmShutdownData, VmShutdownError, VmShutdownResponse, VmUpdateSpecsData, VmUpdateSpecsError, VmUpdateSpecsResponse, VmStartData, VmStartError, VmStartResponse, VmUpdateSpecs2Data, VmUpdateSpecs2Error, VmUpdateSpecs2Response } from './types.gen';

export const client = createClient(createConfig());

/**
 * Metadata about the API
 */
export const metaInfo = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<MetaInfoResponse, MetaInfoError, ThrowOnError>({
        ...options,
        url: '/meta/info'
    });
};

/**
 * Create a Workspace
 * Create a new, empty, workspace in the current organization
 *
 */
export const workspaceCreate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<WorkspaceCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<WorkspaceCreateResponse2, WorkspaceCreateError, ThrowOnError>({
        ...options,
        url: '/org/workspace'
    });
};

/**
 * Create an API Token
 * Create a new API token for a workspace that is part of the current organization.
 *
 */
export const tokenCreate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<TokenCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<TokenCreateResponse2, TokenCreateError, ThrowOnError>({
        ...options,
        url: '/org/workspace/{team_id}/tokens'
    });
};

/**
 * Update an API Token
 * Update an API token for a workspace that is part of the current organization.
 *
 */
export const tokenUpdate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<TokenUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<TokenUpdateResponse2, TokenUpdateError, ThrowOnError>({
        ...options,
        url: '/org/workspace/{team_id}/tokens/{token_id}'
    });
};

/**
 * List Sandboxes
 * List sandboxes from the current workspace with optional filters.
 * Results are limited to a maximum of 50 sandboxes per request.
 *
 */
export const sandboxList = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<SandboxListData, ThrowOnError>) => {
    return (options?.client ?? client).get<SandboxListResponse2, SandboxListError, ThrowOnError>({
        ...options,
        url: '/sandbox'
    });
};

/**
 * Create a Sandbox
 * Create a new sandbox in the current workspace with file contents
 *
 */
export const sandboxCreate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<SandboxCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<SandboxCreateResponse2, SandboxCreateError, ThrowOnError>({
        ...options,
        url: '/sandbox'
    });
};

/**
 * Get a Sandbox
 * Retrieve a sandbox by its ID
 *
 */
export const sandboxGet = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SandboxGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<SandboxGetResponse2, SandboxGetError, ThrowOnError>({
        ...options,
        url: '/sandbox/{id}'
    });
};

/**
 * Fork a Sandbox
 * Fork an existing sandbox to the current workspace
 *
 */
export const sandboxFork = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SandboxForkData, ThrowOnError>) => {
    return (options?.client ?? client).post<SandboxForkResponse2, SandboxForkError, ThrowOnError>({
        ...options,
        url: '/sandbox/{id}/fork'
    });
};

/**
 * Hibernate a VM
 * Suspends a running VM, saving a snapshot of its memory and running processes
 *
 * This endpoint may take an extended amount of time to return (30 seconds). If the VM is not
 * currently running, it will return an error (404).
 *
 * Unless later shut down by request or due to inactivity, a hibernated VM can be resumed with
 * minimal latency.
 *
 */
export const vmHibernate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VmHibernateData, ThrowOnError>) => {
    return (options?.client ?? client).post<VmHibernateResponse, VmHibernateError, ThrowOnError>({
        ...options,
        url: '/vm/{id}/hibernate'
    });
};

/**
 * Update VM Hibernation Timeout
 * Updates the hibernation timeout of a running VM.
 *
 * This endpoint can only be used on VMs that belong to your team's workspace.
 * The new timeout must be greater than 0 and less than or equal to 86400 seconds (24 hours).
 *
 */
export const vmUpdateHibernationTimeout = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VmUpdateHibernationTimeoutData, ThrowOnError>) => {
    return (options?.client ?? client).put<VmUpdateHibernationTimeoutResponse, VmUpdateHibernationTimeoutError, ThrowOnError>({
        ...options,
        url: '/vm/{id}/hibernation_timeout'
    });
};

/**
 * Create a new session on a VM
 * Creates a new session on a running VM. A session represents an isolated Linux user, with their own container
 * while their API token has specific permissions (currently, read or write).
 * The session is identified by a unique session ID, and the username is based on the session ID.
 *
 * This endpoint requires the VM to be running. If the VM is not running, it will return a 404 error.
 *
 */
export const vmCreateSession = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VmCreateSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<VmCreateSessionResponse, VmCreateSessionError, ThrowOnError>({
        ...options,
        url: '/vm/{id}/sessions'
    });
};

/**
 * Shutdown a VM
 * Stops a running VM, ending all currently running processes
 *
 * This endpoint may take an extended amount of time to return (30 seconds). If the VM is not
 * currently running, it will return an error (404).
 *
 * Shutdown VMs require additional time to start up.
 *
 */
export const vmShutdown = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VmShutdownData, ThrowOnError>) => {
    return (options?.client ?? client).post<VmShutdownResponse, VmShutdownError, ThrowOnError>({
        ...options,
        url: '/vm/{id}/shutdown'
    });
};

/**
 * Update VM Specs
 * Updates the specifications (CPU, memory, storage) of a running VM.
 *
 * This endpoint can only be used on VMs that belong to your team's workspace.
 * The new tier must not exceed your team's maximum allowed tier.
 *
 */
export const vmUpdateSpecs = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VmUpdateSpecsData, ThrowOnError>) => {
    return (options?.client ?? client).put<VmUpdateSpecsResponse, VmUpdateSpecsError, ThrowOnError>({
        ...options,
        url: '/vm/{id}/specs'
    });
};

/**
 * Start a VM
 * Start a virtual machine for the sandbox (devbox) with the given ID
 *
 * While the `sandbox:read` scope is required for this endpoint, the resulting VM will have
 * permissions according to the `sandbox:edit_code` scope. If present, the returned token will
 * have write permissions to the contents of the VM. Otherwise, the returned token will grant
 * only read-only permissions.
 *
 * This endpoint is subject to special rate limits related to concurrent VM usage.
 *
 */
export const vmStart = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VmStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<VmStartResponse, VmStartError, ThrowOnError>({
        ...options,
        url: '/vm/{id}/start'
    });
};

/**
 * Update VM Specs
 * Updates the specifications (CPU, memory, storage) of a running VM.
 *
 * This endpoint can only be used on VMs that belong to your team's workspace.
 * The new tier must not exceed your team's maximum allowed tier.
 *
 */
export const vmUpdateSpecs2 = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<VmUpdateSpecs2Data, ThrowOnError>) => {
    return (options?.client ?? client).post<VmUpdateSpecs2Response, VmUpdateSpecs2Error, ThrowOnError>({
        ...options,
        url: '/vm/{id}/update_specs'
    });
};