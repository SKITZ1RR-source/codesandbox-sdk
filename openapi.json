{
  "components": {
    "responses": {},
    "schemas": {
      "Error": {
        "oneOf": [
          { "type": "string" },
          { "additionalProperties": true, "type": "object" }
        ],
        "title": "Error"
      },
      "MetaInformation": {
        "properties": {
          "api": {
            "description": "Meta information about the CodeSandbox API",
            "properties": {
              "latest_version": { "type": "string" },
              "name": { "type": "string" }
            },
            "required": ["name", "latest_version"],
            "type": "object"
          },
          "auth": {
            "description": "Meta information about the current authentication context",
            "properties": {
              "scopes": { "items": { "type": "string" }, "type": "array" },
              "team": { "format": "uuid", "nullable": true, "type": "string" },
              "version": { "type": "string" }
            },
            "required": ["scopes", "team", "version"],
            "type": "object"
          }
        },
        "required": ["api"],
        "title": "MetaInformation",
        "type": "object"
      },
      "Response": {
        "properties": {
          "errors": {
            "items": [
              {
                "oneOf": [
                  { "type": "string" },
                  { "additionalProperties": true, "type": "object" }
                ],
                "title": "Error"
              }
            ],
            "type": "array"
          },
          "success": { "type": "boolean" }
        },
        "title": "Response",
        "type": "object"
      },
      "SandboxCreateRequest": {
        "properties": {
          "description": {
            "description": "Optional text description of the sandbox. Defaults to no description.",
            "type": "string"
          },
          "entry": {
            "description": "Filename of the entrypoint of the sandbox.",
            "type": "string"
          },
          "external_resources": {
            "description": "Array of strings with external resources to load.",
            "items": { "type": "string" },
            "type": "array"
          },
          "files": {
            "additionalProperties": {
              "properties": {
                "binary_content": {
                  "description": "If the file has binary (non plain-text) contents, place the base-64 encoded contents in this key. Should be empty or missing if `is_binary` is `false`.",
                  "type": "string"
                },
                "code": {
                  "description": "If the file is non-binary in nature, place the (escaped) plain text contents in this key. Should be empty or missing if `is_binary` is `true`.",
                  "type": "string"
                },
                "is_binary": {
                  "default": false,
                  "description": "Whether the file contains binary contents.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "description": "Map of `path => file` where each file is a map.",
            "type": "object"
          },
          "is_frozen": {
            "default": false,
            "description": "Whether changes to the sandbox are disallowed. Defaults to `false`.",
            "type": "boolean"
          },
          "npm_dependencies": {
            "additionalProperties": { "type": "string" },
            "description": "Map of dependencies and their version specifications.",
            "type": "object"
          },
          "path": {
            "default": "/",
            "description": "Path to the collection where the new sandbox should be stored. Defaults to \"/\". If no collection exists at the given path, it will be created.",
            "type": "string"
          },
          "privacy": {
            "default": 0,
            "description": "0 for public, 1 for unlisted, and 2 for private. Privacy is subject to certain restrictions (team minimum setting, drafts must be private, etc.). Defaults to public.",
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "runtime": {
            "default": "browser",
            "description": "Runtime to use for the sandbox. Defaults to `\"browser\"`.",
            "enum": ["browser", "vm"],
            "type": "string"
          },
          "tags": {
            "default": [],
            "description": "List of string tags to apply to the sandbox. Only the first ten will be used. Defaults to no tags.",
            "items": { "type": "string" },
            "type": "array"
          },
          "template": {
            "description": "Name of the template from which the sandbox is derived (for example, `\"static\"`).",
            "type": "string"
          },
          "title": {
            "default": "",
            "description": "Sandbox title. Maximum 255 characters. Defaults to no title.",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": ["files"],
        "title": "SandboxCreateRequest"
      },
      "SandboxCreateResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "alias": { "type": "string" },
                  "id": { "type": "string" },
                  "title": { "nullable": true, "type": "string" }
                },
                "required": ["alias", "id", "title"],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "SandboxCreateResponse"
      },
      "SandboxForkRequest": {
        "properties": {
          "description": {
            "default": "[Original description]",
            "description": "Sandbox description. Maximum 255 characters. Defaults to description of original sandbox.",
            "maxLength": 255,
            "type": "string"
          },
          "is_frozen": {
            "default": false,
            "description": "Sandbox frozen status. When true, edits to the sandbox are restricted. Defaults to frozen status of the original sandbox.",
            "type": "boolean"
          },
          "path": {
            "default": "/",
            "description": "Path to the collection where the new sandbox should be stored. Defaults to \"/\". If no collection exists at the given path, it will be created.",
            "type": "string"
          },
          "privacy": {
            "default": 0,
            "description": "Sandbox privacy. 0 for public, 1 for unlisted, and 2 for private. Subject to the minimum privacy restrictions of the workspace. Defaults to the privacy of the original sandbox.",
            "type": "integer"
          },
          "start_options": {
            "description": "Optional VM start configuration. If provided, the sandbox VM will be started immediately after creation.",
            "properties": {
              "hibernation_timeout_seconds": {
                "description": "The time in seconds after which the VM will hibernate due to inactivity.\nMust be a positive integer between 1 and 86400 (24 hours).\nDefaults to 300 seconds (5 minutes) if not specified.\n",
                "example": 300,
                "maximum": 86400,
                "minimum": 1,
                "type": "integer"
              },
              "ipcountry": {
                "description": "This determines in which cluster, closest to the given country the VM will be started in. The format is ISO-3166-1 alpha-2. If not set, the VM will be started closest to the caller of this API. This will only be applied when a VM is run for the first time, and will only serve as a hint (e.g. if the template of this sandbox runs in EU cluster, this sandbox will also run in the EU cluster).",
                "example": "NL",
                "pattern": "^[A-Z]{2}$",
                "type": "string"
              },
              "tier": {
                "description": "Determines which specs to start the VM with. If not specified, the VM will start with the default specs for the workspace.\n\nYou can only specify a VM tier when starting a VM that is inside your workspace. Specifying a VM tier for someone else's sandbox will return an error.\n\nNot all tiers will be available depending on the workspace subscription status, and higher tiers incur higher costs. Please see codesandbox.io/pricing for details on specs and costs.\n",
                "enum": [
                  "Pico",
                  "Nano",
                  "Micro",
                  "Small",
                  "Medium",
                  "Large",
                  "XLarge"
                ],
                "example": "Micro"
              }
            },
            "type": "object"
          },
          "tags": {
            "default": [],
            "description": "Tags to set on the new sandbox, if any. Will not inherit tags from the source sandbox.",
            "items": { "type": "string" },
            "type": "array"
          },
          "title": {
            "default": "[Original title]",
            "description": "Sandbox title. Maximum 255 characters. Defaults to title of original sandbox with (forked).",
            "maxLength": 255,
            "type": "string"
          }
        },
        "title": "SandboxForkRequest",
        "type": "object"
      },
      "SandboxForkResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "alias": { "type": "string" },
                  "id": { "type": "string" },
                  "start_response": {
                    "description": "VM start response. Only present when start_options were provided in the request.",
                    "nullable": true,
                    "properties": {
                      "bootup_type": { "type": "string" },
                      "cluster": { "type": "string" },
                      "id": { "type": "string" },
                      "latest_pitcher_version": { "type": "string" },
                      "pitcher_manager_version": { "type": "string" },
                      "pitcher_token": { "type": "string" },
                      "pitcher_url": { "type": "string" },
                      "pitcher_version": { "type": "string" },
                      "reconnect_token": { "type": "string" },
                      "user_workspace_path": { "type": "string" },
                      "workspace_path": { "type": "string" }
                    },
                    "required": [
                      "bootup_type",
                      "cluster",
                      "id",
                      "latest_pitcher_version",
                      "pitcher_manager_version",
                      "pitcher_token",
                      "pitcher_url",
                      "pitcher_version",
                      "reconnect_token",
                      "user_workspace_path",
                      "workspace_path"
                    ],
                    "type": "object"
                  },
                  "title": { "nullable": true, "type": "string" }
                },
                "required": ["alias", "id", "title"],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "SandboxForkResponse"
      },
      "SandboxGetResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "created_at": { "format": "date-time", "type": "string" },
                  "description": { "nullable": true, "type": "string" },
                  "id": { "type": "string" },
                  "is_frozen": { "type": "boolean" },
                  "privacy": { "type": "integer" },
                  "tags": { "items": { "type": "string" }, "type": "array" },
                  "title": { "nullable": true, "type": "string" },
                  "updated_at": { "format": "date-time", "type": "string" }
                },
                "required": [
                  "id",
                  "privacy",
                  "is_frozen",
                  "created_at",
                  "updated_at",
                  "tags"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "SandboxGetResponse"
      },
      "SandboxListResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "sandboxes": {
                    "items": {
                      "properties": {
                        "created_at": {
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": { "nullable": true, "type": "string" },
                        "id": { "type": "string" },
                        "is_frozen": { "type": "boolean" },
                        "privacy": { "type": "integer" },
                        "tags": {
                          "items": { "type": "string" },
                          "type": "array"
                        },
                        "title": { "nullable": true, "type": "string" },
                        "updated_at": {
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "privacy",
                        "is_frozen",
                        "created_at",
                        "updated_at",
                        "tags"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": ["sandboxes"],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "SandboxListResponse"
      },
      "TokenCreateRequest": {
        "properties": {
          "default_version": {
            "description": "API Version to use, formatted as YYYY-MM-DD. Defaults to the latest version at time of creation.",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Description of this token, for instance where it will be used.",
            "maxLength": 255,
            "type": "string"
          },
          "expires_at": {
            "description": "UTC Timestamp until when this token is valid. Omitting this field will create a token without an expiry.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "scopes": {
            "description": "Which scopes to grant this token. The given scopes will replace the current scopes, revoking any that are no longer present in the list.",
            "items": {
              "enum": [
                "sandbox_create",
                "sandbox_edit_code",
                "sandbox_read",
                "vm_manage"
              ]
            },
            "type": "array"
          }
        },
        "title": "TokenCreateRequest",
        "type": "object"
      },
      "TokenCreateResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "description": { "nullable": true, "type": "string" },
                  "expires_at": { "nullable": true, "type": "string" },
                  "scopes": { "items": { "type": "string" }, "type": "array" },
                  "team_id": { "type": "string" },
                  "token": { "type": "string" },
                  "token_id": { "type": "string" }
                },
                "required": [
                  "description",
                  "expires_at",
                  "scopes",
                  "team_id",
                  "token",
                  "token_id"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "TokenCreateResponse"
      },
      "TokenUpdateRequest": {
        "description": "Updateable fields for API Tokens. Omitting a field will not update it; explicitly passing null or an empty list will clear the value.",
        "properties": {
          "default_version": {
            "description": "API Version to use, formatted as YYYY-MM-DD",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "Description of this token, for instance where it will be used.",
            "maxLength": 255,
            "nullable": true,
            "type": "string"
          },
          "expires_at": {
            "description": "Expiry time of this token. Cannot be set in the past, and cannot be changed for tokens that have already expired. Pass null to make this token never expire.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "scopes": {
            "description": "Which scopes to grant this token. The given scopes will replace the current scopes, revoking any that are no longer present in the list.",
            "items": {
              "enum": [
                "sandbox_create",
                "sandbox_edit_code",
                "sandbox_read",
                "vm_manage"
              ]
            },
            "type": "array"
          }
        },
        "title": "TokenUpdateRequest",
        "type": "object"
      },
      "TokenUpdateResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "description": { "nullable": true, "type": "string" },
                  "expires_at": {
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "scopes": { "items": { "type": "string" }, "type": "array" },
                  "team_id": { "type": "string" },
                  "token_id": { "type": "string" }
                },
                "required": ["description", "scopes", "team_id", "token_id"],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "TokenUpdateResponse"
      },
      "VMCreateSessionRequest": {
        "properties": {
          "permission": {
            "description": "Permission level for the session",
            "enum": ["read", "write"],
            "example": "write",
            "type": "string"
          },
          "session_id": {
            "description": "Unique identifier for the session",
            "example": "my-session-1",
            "type": "string"
          }
        },
        "required": ["session_id", "permission"],
        "title": "VMCreateSessionRequest",
        "type": "object"
      },
      "VMCreateSessionResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "capabilities": {
                    "description": "List of capabilities granted to this session",
                    "items": { "type": "string" },
                    "type": "array"
                  },
                  "permissions": {
                    "description": "Detailed permissions for this session",
                    "type": "object"
                  },
                  "pitcher_token": {
                    "description": "Token to authenticate with Pitcher",
                    "type": "string"
                  },
                  "pitcher_url": {
                    "description": "WebSocket URL to connect to Pitcher",
                    "type": "string"
                  },
                  "user_workspace_path": {
                    "description": "Path to the user's workspace in the VM",
                    "type": "string"
                  },
                  "username": {
                    "description": "The Linux username created for this session",
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "pitcher_token",
                  "user_workspace_path",
                  "capabilities",
                  "permissions",
                  "pitcher_url"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "VMCreateSessionResponse"
      },
      "VMHibernateRequest": { "properties": {}, "title": "VMHibernateRequest" },
      "VMHibernateResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": { "data": { "properties": {}, "type": "object" } },
            "type": "object"
          }
        ],
        "title": "VMHibernateResponse"
      },
      "VMShutdownRequest": { "properties": {}, "title": "VMShutdownRequest" },
      "VMShutdownResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": { "data": { "properties": {}, "type": "object" } },
            "type": "object"
          }
        ],
        "title": "VMShutdownResponse"
      },
      "VMStartRequest": {
        "properties": {
          "hibernation_timeout_seconds": {
            "description": "The time in seconds after which the VM will hibernate due to inactivity.\nMust be a positive integer between 1 and 86400 (24 hours).\nDefaults to 300 seconds (5 minutes) if not specified.\n",
            "example": 300,
            "maximum": 86400,
            "minimum": 1,
            "type": "integer"
          },
          "ipcountry": {
            "description": "This determines in which cluster, closest to the given country the VM will be started in. The format is ISO-3166-1 alpha-2. If not set, the VM will be started closest to the caller of this API. This will only be applied when a VM is run for the first time, and will only serve as a hint (e.g. if the template of this sandbox runs in EU cluster, this sandbox will also run in the EU cluster).",
            "example": "NL",
            "pattern": "^[A-Z]{2}$",
            "type": "string"
          },
          "tier": {
            "description": "Determines which specs to start the VM with. If not specified, the VM will start with the default specs for the workspace.\n\nYou can only specify a VM tier when starting a VM that is inside your workspace. Specifying a VM tier for someone else's sandbox will return an error.\n\nNot all tiers will be available depending on the workspace subscription status, and higher tiers incur higher costs. Please see codesandbox.io/pricing for details on specs and costs.\n",
            "enum": [
              "Pico",
              "Nano",
              "Micro",
              "Small",
              "Medium",
              "Large",
              "XLarge"
            ],
            "example": "Micro"
          }
        },
        "title": "VMStartRequest",
        "type": "object"
      },
      "VMStartResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "bootup_type": { "type": "string" },
                  "cluster": { "type": "string" },
                  "id": { "type": "string" },
                  "latest_pitcher_version": { "type": "string" },
                  "pitcher_manager_version": { "type": "string" },
                  "pitcher_token": { "type": "string" },
                  "pitcher_url": { "type": "string" },
                  "pitcher_version": { "type": "string" },
                  "reconnect_token": { "type": "string" },
                  "user_workspace_path": { "type": "string" },
                  "workspace_path": { "type": "string" }
                },
                "required": [
                  "bootup_type",
                  "cluster",
                  "id",
                  "latest_pitcher_version",
                  "pitcher_manager_version",
                  "pitcher_token",
                  "pitcher_url",
                  "pitcher_version",
                  "reconnect_token",
                  "user_workspace_path",
                  "workspace_path"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "VMStartResponse"
      },
      "VMUpdateHibernationTimeoutRequest": {
        "properties": {
          "hibernation_timeout_seconds": {
            "description": "The new hibernation timeout in seconds.\n\nMust be greater than 0 and less than or equal to 86400 (24 hours).\n",
            "example": 300,
            "maximum": 86400,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": ["hibernation_timeout_seconds"],
        "title": "VMUpdateHibernationTimeoutRequest",
        "type": "object"
      },
      "VMUpdateHibernationTimeoutResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "hibernation_timeout_seconds": { "type": "integer" },
                  "id": { "type": "string" }
                },
                "required": ["id", "hibernation_timeout_seconds"],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "VMUpdateHibernationTimeoutResponse"
      },
      "VMUpdateSpecsRequest": {
        "properties": {
          "tier": {
            "description": "Determines which specs to update the VM with.\n\nNot all tiers will be available depending on the workspace subscription status, and higher tiers incur higher costs. Please see codesandbox.io/pricing for details on specs and costs.\n",
            "enum": [
              "Pico",
              "Nano",
              "Micro",
              "Small",
              "Medium",
              "Large",
              "XLarge"
            ],
            "example": "Micro"
          }
        },
        "required": ["tier"],
        "title": "VMUpdateSpecsRequest",
        "type": "object"
      },
      "VMUpdateSpecsResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "id": { "type": "string" },
                  "tier": { "type": "string" }
                },
                "required": ["id", "tier"],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "VMUpdateSpecsResponse"
      },
      "WorkspaceCreateRequest": {
        "properties": {
          "name": {
            "description": "Name for the new workspace. Maximum length 64 characters.",
            "maxLength": 64,
            "type": "string"
          }
        },
        "required": ["name"],
        "title": "WorkspaceCreateRequest",
        "type": "object"
      },
      "WorkspaceCreateResponse": {
        "allOf": [
          {
            "properties": {
              "errors": {
                "items": [
                  {
                    "oneOf": [
                      { "type": "string" },
                      { "additionalProperties": true, "type": "object" }
                    ],
                    "title": "Error"
                  }
                ],
                "type": "array"
              },
              "success": { "type": "boolean" }
            },
            "title": "Response",
            "type": "object"
          },
          {
            "properties": {
              "data": {
                "properties": {
                  "id": { "type": "string" },
                  "name": { "type": "string" }
                },
                "required": ["id", "name"],
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "title": "WorkspaceCreateResponse"
      }
    },
    "securitySchemes": {
      "authorization": { "scheme": "bearer", "type": "http" }
    }
  },
  "info": { "title": "CodeSandbox API", "version": "2023-07-01" },
  "openapi": "3.0.0",
  "paths": {
    "/meta/info": {
      "get": {
        "callbacks": {},
        "operationId": "meta/info",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MetaInformation" }
              }
            },
            "description": "Meta Info Response"
          }
        },
        "security": [{}],
        "summary": "Metadata about the API",
        "tags": ["meta"]
      }
    },
    "/org/workspace": {
      "post": {
        "callbacks": {},
        "description": "Create a new, empty, workspace in the current organization\n",
        "operationId": "workspace/create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceCreateRequest"
              }
            }
          },
          "description": "Workspace Create Request",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceCreateResponse"
                }
              }
            },
            "description": "Workspace Create Response"
          }
        },
        "security": [{ "authorization": ["workspace:create"] }],
        "summary": "Create a Workspace",
        "tags": []
      }
    },
    "/org/workspace/{team_id}/tokens": {
      "post": {
        "callbacks": {},
        "description": "Create a new API token for a workspace that is part of the current organization.\n",
        "operationId": "token/create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TokenCreateRequest" }
            }
          },
          "description": "Token Create Request",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenCreateResponse" }
              }
            },
            "description": "Token Create Response"
          }
        },
        "security": [{ "authorization": ["token:manage"] }],
        "summary": "Create an API Token",
        "tags": []
      }
    },
    "/org/workspace/{team_id}/tokens/{token_id}": {
      "patch": {
        "callbacks": {},
        "description": "Update an API token for a workspace that is part of the current organization.\n",
        "operationId": "token/update",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TokenUpdateRequest" }
            }
          },
          "description": "Token Update Request",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenUpdateResponse" }
              }
            },
            "description": "Token Update Response"
          }
        },
        "security": [{ "authorization": ["token:manage"] }],
        "summary": "Update an API Token",
        "tags": []
      }
    },
    "/sandbox": {
      "get": {
        "callbacks": {},
        "description": "List sandboxes from the current workspace with optional filters.\nResults are limited to a maximum of 50 sandboxes per request.\n",
        "operationId": "sandbox/list",
        "parameters": [
          {
            "description": "Comma-separated list of tags to filter by",
            "example": "sha-123,feature-x",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Field to order results by",
            "example": "updated_at",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "updated_at",
              "enum": ["inserted_at", "updated_at"]
            }
          },
          {
            "description": "Order direction",
            "example": "desc",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": { "default": "desc", "enum": ["asc", "desc"] }
          },
          {
            "description": "Maximum number of sandboxes to return in a single response",
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "default": 20,
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page number to return",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "default": 1, "minimum": 1, "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SandboxListResponse" }
              }
            },
            "description": "Sandbox List Response"
          }
        },
        "security": [{ "authorization": ["sandbox:read"] }],
        "summary": "List Sandboxes",
        "tags": ["sandbox"]
      },
      "post": {
        "callbacks": {},
        "description": "Create a new sandbox in the current workspace with file contents\n",
        "operationId": "sandbox/create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SandboxCreateRequest" }
            }
          },
          "description": "Sandbox Create Request",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxCreateResponse"
                }
              }
            },
            "description": "Sandbox Create Response"
          }
        },
        "security": [{ "authorization": ["sandbox:create"] }],
        "summary": "Create a Sandbox",
        "tags": ["sandbox"]
      }
    },
    "/sandbox/{id}": {
      "get": {
        "callbacks": {},
        "description": "Retrieve a sandbox by its ID\n",
        "operationId": "sandbox/get",
        "parameters": [
          {
            "description": "Short ID of the sandbox to retrieve",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SandboxGetResponse" }
              }
            },
            "description": "Sandbox Get Response"
          }
        },
        "security": [{ "authorization": ["sandbox:read"] }],
        "summary": "Get a Sandbox",
        "tags": ["sandbox"]
      }
    },
    "/sandbox/{id}/fork": {
      "post": {
        "callbacks": {},
        "description": "Fork an existing sandbox to the current workspace\n",
        "operationId": "sandbox/fork",
        "parameters": [
          {
            "description": "Short ID of the sandbox to fork",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SandboxForkRequest" }
            }
          },
          "description": "Sandbox Fork Request",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SandboxForkResponse" }
              }
            },
            "description": "Sandbox Fork Response"
          }
        },
        "security": [{ "authorization": ["sandbox:create"] }],
        "summary": "Fork a Sandbox",
        "tags": ["sandbox"]
      }
    },
    "/vm/{id}/hibernate": {
      "post": {
        "callbacks": {},
        "description": "Suspends a running VM, saving a snapshot of its memory and running processes\n\nThis endpoint may take an extended amount of time to return (30 seconds). If the VM is not\ncurrently running, it will return an error (404).\n\nUnless later shut down by request or due to inactivity, a hibernated VM can be resumed with\nminimal latency.\n",
        "operationId": "vm/hibernate",
        "parameters": [
          {
            "description": "Sandbox ID",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VMHibernateRequest" }
            }
          },
          "description": "VM Hibernate Request",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VMHibernateResponse" }
              }
            },
            "description": "VM Hibernate Response"
          }
        },
        "security": [{ "authorization": ["vm:manage"] }],
        "summary": "Hibernate a VM",
        "tags": ["vm"]
      }
    },
    "/vm/{id}/hibernation_timeout": {
      "put": {
        "callbacks": {},
        "description": "Updates the hibernation timeout of a running VM.\n\nThis endpoint can only be used on VMs that belong to your team's workspace.\nThe new timeout must be greater than 0 and less than or equal to 86400 seconds (24 hours).\n",
        "operationId": "vm/update_hibernation_timeout",
        "parameters": [
          {
            "description": "Sandbox ID",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMUpdateHibernationTimeoutRequest"
              }
            }
          },
          "description": "VM Update Hibernation Timeout Request",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMUpdateHibernationTimeoutResponse"
                }
              }
            },
            "description": "VM Update Hibernation Timeout Response"
          }
        },
        "security": [{ "authorization": ["vm:manage"] }],
        "summary": "Update VM Hibernation Timeout",
        "tags": ["vm"]
      }
    },
    "/vm/{id}/sessions": {
      "post": {
        "callbacks": {},
        "description": "Creates a new session on a running VM. A session represents an isolated Linux user, with their own container\nwhile their API token has specific permissions (currently, read or write).\nThe session is identified by a unique session ID, and the username is based on the session ID.\n\nThis endpoint requires the VM to be running. If the VM is not running, it will return a 404 error.\n",
        "operationId": "vm/create_session",
        "parameters": [
          {
            "description": "Sandbox ID",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMCreateSessionRequest"
              }
            }
          },
          "description": "VM Create Session Request",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMCreateSessionResponse"
                }
              }
            },
            "description": "VM Create Session Response"
          }
        },
        "security": [{ "authorization": ["sandbox:read", "vm:manage"] }],
        "summary": "Create a new session on a VM",
        "tags": ["vm"]
      }
    },
    "/vm/{id}/shutdown": {
      "post": {
        "callbacks": {},
        "description": "Stops a running VM, ending all currently running processes\n\nThis endpoint may take an extended amount of time to return (30 seconds). If the VM is not\ncurrently running, it will return an error (404).\n\nShutdown VMs require additional time to start up.\n",
        "operationId": "vm/shutdown",
        "parameters": [
          {
            "description": "Sandbox ID",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VMShutdownRequest" }
            }
          },
          "description": "VM Shutdown Request",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VMShutdownResponse" }
              }
            },
            "description": "VM Shutdown Response"
          }
        },
        "security": [{ "authorization": ["vm:manage"] }],
        "summary": "Shutdown a VM",
        "tags": ["vm"]
      }
    },
    "/vm/{id}/specs": {
      "put": {
        "callbacks": {},
        "description": "Updates the specifications (CPU, memory, storage) of a running VM.\n\nThis endpoint can only be used on VMs that belong to your team's workspace.\nThe new tier must not exceed your team's maximum allowed tier.\n",
        "operationId": "vm/update_specs",
        "parameters": [
          {
            "description": "Sandbox ID",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VMUpdateSpecsRequest" }
            }
          },
          "description": "VM Update Specs Request",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMUpdateSpecsResponse"
                }
              }
            },
            "description": "VM Update Specs Response"
          }
        },
        "security": [{ "authorization": ["vm:manage"] }],
        "summary": "Update VM Specs",
        "tags": ["vm"]
      }
    },
    "/vm/{id}/start": {
      "post": {
        "callbacks": {},
        "description": "Start a virtual machine for the sandbox (devbox) with the given ID\n\nWhile the `sandbox:read` scope is required for this endpoint, the resulting VM will have\npermissions according to the `sandbox:edit_code` scope. If present, the returned token will\nhave write permissions to the contents of the VM. Otherwise, the returned token will grant\nonly read-only permissions.\n\nThis endpoint is subject to special rate limits related to concurrent VM usage.\n",
        "operationId": "vm/start",
        "parameters": [
          {
            "description": "Sandbox ID",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VMStartRequest" }
            }
          },
          "description": "VM Start Request",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VMStartResponse" }
              }
            },
            "description": "VM Start Response"
          }
        },
        "security": [{ "authorization": ["sandbox:read", "vm:manage"] }],
        "summary": "Start a VM",
        "tags": ["vm"]
      }
    },
    "/vm/{id}/update_specs": {
      "post": {
        "callbacks": {},
        "description": "Updates the specifications (CPU, memory, storage) of a running VM.\n\nThis endpoint can only be used on VMs that belong to your team's workspace.\nThe new tier must not exceed your team's maximum allowed tier.\n",
        "operationId": "vm/update_specs (2)",
        "parameters": [
          {
            "description": "Sandbox ID",
            "example": "new",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VMUpdateSpecsRequest" }
            }
          },
          "description": "VM Update Specs Request",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMUpdateSpecsResponse"
                }
              }
            },
            "description": "VM Update Specs Response"
          }
        },
        "security": [{ "authorization": ["vm:manage"] }],
        "summary": "Update VM Specs",
        "tags": ["vm"]
      }
    }
  },
  "security": [],
  "servers": [{ "url": "https://api.codesandbox.stream", "variables": {} }],
  "tags": []
}
